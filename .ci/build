#!/bin/bash

if [[ $(uname) == 'Darwin' ]]; then
  READLINK_BIN="greadlink"
else
  READLINK_BIN="readlink"
fi

if [[ -z "${HUGO}" ]]; then
  HUGO=hugo
fi

if [[ -z "${GARDENER_WEBSITE_GENERATOR_PATH}" ]]; then
  generatorRepoPath="$(${READLINK_BIN} -f $(dirname ${0})/..)"
else
  generatorRepoPath="$(${READLINK_BIN} -f "${GARDENER_WEBSITE_GENERATOR_PATH}")"
fi
if [[ ! -d "${generatorRepoPath}" ]]; then
  echo "website-generator directory path is invalid ["${generatorRepoPath}"]. Set $GARDENER_WEBSITE_GENERATOR_PATH to a correct path or run from website-generator cloned repo."
  exit 1
fi
if [[ -z "${GARDENER_WEBSITE_PATH}" ]]; then
  # Fallback to "website" repo cloned as peer directory to "website-generator"
  websiteRepoPath="$(${READLINK_BIN} -f $(dirname ${0})/../../website)"
else
  websiteRepoPath="$(${READLINK_BIN} -f "${GARDENER_WEBSITE_PATH}")"
fi

if [ -f "./latestDocVersion" ]; then
  v=$(cat ./latestDocVersion)
  semver=(${v//./ })
  export LATESTVERSION=${semver[1]}
else
  echo "Building from single branch file doesn't exist: $(pwd)/latestDocVersion"
fi

# TODO: swilen-iwanow
# This is to ensure that if none of the env vars are set, we build the site from the master branch
# for backwards compatibility. We can clear some of this logic after we make the documentation repo
# versioned.
if [[ -z "${LATESTVERSION}" && -z "${BUILDSINGLEBRANCH}" ]]; then
  export BUILDSINGLEBRANCH=true
  if [[ -z "${BRANCH}" ]]; then
    export BRANCH=master
  fi
fi

if [[ -z "${FORK}" ]]; then
  export FORK=swilen-iwanow
  # export FORK=gardener
fi

generator=${generatorRepoPath}
website=${websiteRepoPath}/docs
echo "Content directory: ${content}"
echo "Generated site directory: ${website}"

cd ${generator}

# Setup authentication tokens if not supplied in env
if [[ -z "$GIT_OAUTH_TOKEN" ]] && [[ -z "$GIT_USER" ]] && [[ -z "$GIT_PASSWORD" ]]; then
  # Check if gardener-ci is available (in local setup)
  command -v gardener-ci >/dev/null && gardenci="true" || gardenci=""
  if [[ $gardenci == "true" ]]; then
    gardener-ci config attribute --cfg-type github --cfg-name github_com --key technical_users --json >github_com_yaml
    if [[ -r github_com_yaml ]]; then
      # get auth token and strip lead/trail quotes
      export GIT_OAUTH_TOKEN=$(sed -e 's/^"//' -e 's/"$//' <<<$(jq .[0].authToken github_com_yaml))
      rm github_com_yaml
    fi
  fi
fi

./.ci/clone_doc_version.sh

cd hugo

# Generate site from ${content} into ${website}
#
echo
hugo --minify --destination ${website}

# if [[ -z ${AUTO_PUBLISH+x} ]]; then
if [[ $AUTO_PUBLISH != 'false' ]]; then
  echo "Publishing build results"
  cd ${contentRepoPath}
  echo
  echo "Adding changed JSON git history to repo for faster site generation the next time"
  git add . -A
  git commit -m 'Add git history by CI/CD pipeline for fast lookup for hugo site generation. Done by concourse [skip ci]'
  # git log --name-status HEAD^..HEAD | cat

  cd ${websiteRepoPath}
  echo
  echo "Committing website changes"
  git add . -A
  git commit -m 'Automatic build triggered by last commit [skip ci]'
# git log --name-status HEAD^..HEAD | cat
# fi
fi
